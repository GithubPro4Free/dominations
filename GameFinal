import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Random;
import java.util.Scanner;

public class Game {
	int nbrJoueur;
	ArrayList<Domino> listeDomino;
	
	public Game(int nbrJoueur, ArrayList<Domino> listeDomino) {
		this.nbrJoueur=nbrJoueur;
		this.listeDomino=listeDomino;
	}

	public int getNbrJoueur() {
		return nbrJoueur;
	}

	public void setNbrJoueur(int nbrJoueur) {
		this.nbrJoueur = nbrJoueur;
	}

	public ArrayList<Domino> getListeDomino() {
		return listeDomino;
	}

	public void setListeDomino(ArrayList<Domino> listeDomino) {
		this.listeDomino = listeDomino;
	}
	Random random =new Random();
	public ArrayList<Domino> creationDomino(int nbrJoueur){
		ArrayList<Domino> listeDomino =new ArrayList<>();
		BufferedReader reader = null;

		try {
		    File file = new File("/Users/Matthieu/Downloads/dominos.csv"); // A CHANGER SELON L UTILISATEUR!!!!!
		    reader = new BufferedReader(new FileReader(file));

		    String line;
		    int n=0;
		    HashMap<Integer, String> list = new HashMap<Integer, String>();
		    while ((line = reader.readLine()) != null) {
		        System.out.println(line);
		        list.put(n,line);
		        n++;
		        
		        
		    }
			String valListe = list.get(3);  // ici je teste le dictionnaire list 
			String[] valListeSep = valListe.split(","); //split() me permet de separer un String selon ce que je veux 
		    for(int k=1;k<list.size();k++) {
		    	String valList=list.get(k);
		    	String[] valListSep=valList.split(",");
		    	int numero= Integer.parseInt(valListSep[4]);
		    	String royaume1= valListSep[1];
		    	int nbrCouronne1= Integer.parseInt(valListSep[0]);
		    	String royaume2= valListSep[3];
		    	int nbrCouronne2= Integer.parseInt(valListSep[2]);
		    	Domino domino = new Domino(numero,royaume1,nbrCouronne1,royaume2,nbrCouronne2);
		    	listeDomino.add(domino);
		    }


		} catch (IOException e) {
		    e.printStackTrace();
		} finally {
		    try {
		        reader.close();
		    } catch (IOException e) {
		        e.printStackTrace();
		    }
		}
		int nbrDominoEnleve=(4-nbrJoueur)*12;
		
		int nbrDomino=48;
		while(nbrDominoEnleve!=0) {
			int nbrAleatoire = random.nextInt(nbrDomino);
			listeDomino.remove(listeDomino.get(nbrAleatoire));
			nbrDominoEnleve--;
			nbrDomino--;
		}
		return listeDomino;
	}
	
	public ArrayList<Domino> tirageDomino(int nbrJoueur, ArrayList<Domino>listeDomino) {
		ArrayList<ArrayList> resultat = new ArrayList<>();
		ArrayList<Domino> listeDominoTirage = new ArrayList<>();
		ArrayList<Domino> listeDominoTirageTrie = new ArrayList<>();
		ArrayList<Integer> listeNbrAlea = new ArrayList<>();
		ArrayList<ArrayList> listeResultat = new ArrayList<>();
		if(nbrJoueur==3) {
			for(int i=0;i<3;i++) {
				int nbrAleatoire = random.nextInt(listeDomino.size());
				listeDominoTirage.add(listeDomino.get(nbrAleatoire));
				listeDomino.remove(listeDomino.get(nbrAleatoire));
			}
			while(listeDominoTirage.size()!=0) {
				int a=49;
				int b=0;
				for(int i=0;i<listeDominoTirage.size();i++) {
					if(listeDominoTirage.get(i).getNumero()<a) {
						a=listeDominoTirage.get(i).getNumero();
						b=i;
					}
				}
				listeDominoTirageTrie.add(listeDominoTirage.get(b));
				listeDominoTirage.remove(listeDominoTirage.get(b));
			}
			
		}
		else {
			for(int i=0;i<4;i++) {
				int nbrAleatoire = random.nextInt(listeDomino.size());
				listeDominoTirage.add(listeDomino.get(nbrAleatoire));
				listeDomino.remove(listeDomino.get(nbrAleatoire));
			}
			while(listeDominoTirage.size()!=0) {
				int a=49;
				int b=0;
				for(int i=0;i<listeDominoTirage.size();i++) {
					if(listeDominoTirage.get(i).getNumero()<a) {
						a=listeDominoTirage.get(i).getNumero();
						b=i;
					}
				}
				listeDominoTirageTrie.add(listeDominoTirage.get(b));
				listeDominoTirage.remove(listeDominoTirage.get(b));
			}
			
		}
		return listeDominoTirageTrie;
	}
	public ArrayList<Domino> choixDomino(ArrayList<Domino> listeDominoTirageTrie,ArrayList<Joueur> listeJoueur) {
		ArrayList<Domino> listeDominoTirageAnnexe=new ArrayList(listeDominoTirageTrie);
		ArrayList<Joueur> listeJoueurAnnexe=new ArrayList(listeJoueur);
		ArrayList<Domino> listeDominoSortie=new ArrayList<>();
		System.out.println(listeJoueurAnnexe);
		while(listeJoueur.size()!=0) {
			String[][] matrice=listeJoueur.get(0).getPlateauType();
			System.out.println(listeJoueur.size());
			System.out.println(listeJoueur.get(0).getName()+", quel domino choisissez-vous ?");
			for(int i=0;i<listeDominoTirageTrie.size();i++) {
				System.out.println(listeDominoTirageTrie.get(i).getNumero()+" "+listeDominoTirageTrie.get(i).getRoyaume1()+" "+listeDominoTirageTrie.get(i).getNbrCouronne1()+" "+listeDominoTirageTrie.get(i).getRoyaume2()+" "+listeDominoTirageTrie.get(i).getNbrCouronne2());
			}
			Scanner scanner = new Scanner(System.in);
			int choixDomino=0;
			if(listeJoueur.get(0).isHuman()) {
				choixDomino=scanner.nextInt();
			}
			else {
				ArrayList<Domino> listeDominoTirageTrieAnnexe = new ArrayList(listeDominoTirageTrie);
				ArrayList<Integer> listeCompteur=ia(matrice);
				ArrayList<String> listeType = new ArrayList<>(Arrays.asList("Montagne","Mine","Mer","Plaine","Champs","Foret"));
				while(listeCompteur.size()!=0){
					int rang3=listeCompteur.indexOf(Collections.max(listeCompteur));
					String type=listeType.get(rang3);
					for(int i=0;i<listeDominoTirageTrieAnnexe.size();i++){
						String type1=listeDominoTirageTrieAnnexe.get(i).getRoyaume1();
						String type2=listeDominoTirageTrieAnnexe.get(i).getRoyaume2();
						if(type.equals(type1) || type.equals(type2)){
							choixDomino=listeDominoTirageTrieAnnexe.get(i).getNumero();
							break;
						}
					}
					listeCompteur.remove(listeCompteur.get(rang3));
				}
				if(choixDomino==0) {
					choixDomino=listeDominoTirageTrie.get(0).getNumero();
				}
			}
			
			 
			int rang=0;
			for(int i=0;i<listeDominoTirageTrie.size();i++) {
				if(choixDomino==listeDominoTirageTrie.get(i).getNumero()) {
					rang=i;
					System.out.println(rang);
				}
			}
			int rang2=0;
			for(int i=0;i<listeDominoTirageAnnexe.size();i++) {
				if(choixDomino==listeDominoTirageAnnexe.get(i).getNumero()) {
					rang2=i;
					System.out.println(rang2);
				}
			}
			listeDominoSortie.add(listeDominoTirageTrie.get(rang));
			listeJoueurAnnexe.set(rang2,listeJoueur.get(0));
			listeDominoTirageTrie.remove(listeDominoTirageTrie.get(rang));
			listeJoueur.remove(listeJoueur.get(0));
			System.out.println(listeDominoTirageTrie);
			System.out.println(listeJoueurAnnexe);
			System.out.println(listeDominoSortie);
			
		}
		listeJoueur.addAll(listeJoueurAnnexe);
		return listeDominoSortie;
	}
	public void tourPlacageDomino(ArrayList<Joueur> listeJoueurPlacement,ArrayList<Domino> listeDominoSortie) {
		while(listeJoueurPlacement.size()!=0) {
			if(listeJoueurPlacement.get(0).isHuman()) {
				listeJoueurPlacement.get(0).placement(listeJoueurPlacement.get(0).getPlateauType(),listeDominoSortie,listeJoueurPlacement.get(0).getPlateauCouronne());
			}
			else {
				listeJoueurPlacement.get(0).placementIA(listeJoueurPlacement.get(0).getPlateauType(),listeDominoSortie,listeJoueurPlacement.get(0).getPlateauCouronne());
			}
			listeJoueurPlacement.remove(listeJoueurPlacement.get(0));
			listeDominoSortie.remove(listeDominoSortie.get(0));
		}
		System.out.println("Coup Place");
	}
	public ArrayList<Integer> ia(String[][]plateauType){
		ArrayList<Integer> listeCompteur = new ArrayList<>();
		int compteurMer=0;
		int compteurMontagne=0;
		int compteurMine=0;
		int compteurChamps=0;
		int compteurPlaine=0;
		int compteurForet=0;
		for(int i=0;i<11;i++) {
			for(int k=0;k<11;k++) {
				if(plateauType[i][k]=="Mer") {
					compteurMer++;
				}
				if(plateauType[i][k]=="Mine") {
					compteurMine++;
				}
				if(plateauType[i][k]=="Montagne") {
					compteurMontagne++;
				}
				if(plateauType[i][k]=="Plaine") {
					compteurPlaine++;
				}
				if(plateauType[i][k]=="Champs") {
					compteurChamps++;
				}
				if(plateauType[i][k]=="Foret") {
					compteurForet++;
				}
			}
		}
		listeCompteur.add(compteurMontagne);
		listeCompteur.add(compteurMine);
		listeCompteur.add(compteurMer);
		listeCompteur.add(compteurPlaine);
		listeCompteur.add(compteurChamps);
		listeCompteur.add(compteurForet);
		return listeCompteur;
	}
	
	public void vainqueur(ArrayList<Joueur> listeJoueur, ArrayList<Boolean> listeModeOptionnel) {
		ArrayList<Integer> listeResultat = new ArrayList<>();
		for(int i=0;i<listeJoueur.size();i++) {
			int total=listeJoueur.get(i).comptagePoints(listeJoueur.get(i).getPlateauType(), listeJoueur.get(i).getPlateauCouronne(),listeModeOtpionnel); // On compte les points pour chaque joueur
			System.out.println(listeJoueur.get(i).getName());
			System.out.println(total);
			listeResultat.add(total); //on ajoute chaque points pour chaque joueur qui seront classÃ© suivant la liste joueur
		}
		int max=0;
		ArrayList<Joueur> listeVainqueur = new ArrayList<>();
		for(int i=0;i<listeResultat.size();i++) {
			if(listeResultat.get(i)==max) {
				listeVainqueur.add(listeJoueur.get(i));
			}
			else if(listeResultat.get(i)>max) {
				listeVainqueur.clear();
				listeVainqueur.add(listeJoueur.get(i));
			}
		}
		listeResultat.clear();
		if(listeVainqueur.size()!=1) {
			for(int j=0;j<listeVainqueur.size();j++) {
				int compteur=0;
				for(int i=0;i<11;i++) {
					for(int k=0;k<11;k++) {
						if(listeVainqueur.get(j).getPlateauType()[i][k]!=null) {
							compteur++;
						}
					}
				}
				listeResultat.add(compteur);
			}
			
		}
		else {
			System.out.println(listeVainqueur.get(0).getName());
			return;
		}
		for(int i=0;i<listeResultat.size();i++) {
			if(listeResultat.get(i)==max) {
				listeVainqueur.add(listeJoueur.get(i));
			}
			else if(listeResultat.get(i)>max) {
				listeVainqueur.clear();
				listeVainqueur.add(listeJoueur.get(i));
			}
		}
		listeResultat.clear();
		if(listeVainqueur.size()!=1) {
			for(int j=0;j<listeVainqueur.size();j++) {
				int compteurCour=0;
				for(int i=0;i<11;i++) {
					for(int k=0;k<11;k++) {
						compteurCour=compteurCour+listeVainqueur.get(j).getPlateauCouronne()[i][k];
					}
				}
				listeResultat.add(compteurCour);
			}
		}
		else {
			System.out.println(listeVainqueur.get(0).getName());
			return;
		}
		for(int i=0;i<listeResultat.size();i++) {
			if(listeResultat.get(i)==max) {
				listeVainqueur.add(listeJoueur.get(i));
			}
			else if(listeResultat.get(i)>max) {
				listeVainqueur.clear();
				listeVainqueur.add(listeJoueur.get(i));
			}
		}
		for(int i =0;i<listeVainqueur.size();i++) {
			System.out.println(listeVainqueur.get(i).getName());
			return;
		}
	}
}
