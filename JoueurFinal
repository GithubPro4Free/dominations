import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class Joueur {
	String name;
	String color;
	String[][] plateauType;
	int[][]plateauCouronne;
	boolean isHuman;
	Color DARK_GREEN = new Color(0,100,0);
	Color BROWN = new Color(139,69,19);
	
	public Joueur (String name,String color,String [][] plateauType,int[][]plateauCouronne,boolean isHuman) {
		this.name=name;
		this.color=color;
		this.plateauType=plateauType;
		this.plateauCouronne=plateauCouronne;
		this.isHuman=isHuman;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getColor() {
		return color;
	}

	public void setColor(String color) {
		this.color = color;
	}
	
	public String[][] getPlateauType() {
		return plateauType;
	}

	public void setPlateauType(String[][] plateauType) {
		this.plateauType = plateauType;
	}

	public int[][] getPlateauCouronne() {
		return plateauCouronne;
	}

	public void setPlateauCouronne(int[][] plateau2) {
		this.plateauCouronne = plateauCouronne;
	}
	
	public boolean isHuman() {
		return isHuman;
	}

	public void setHuman(boolean isHuman) {
		this.isHuman = isHuman;
	}

	public void afficherPlateau(String[][]plateauType,int[][]plateauCouronne) {
		for(int i=0;i<11;i++) {
			for(int k=0;k<11;k++) {
				String ecriture=""; //Création d'une variable écriture permettant de ranvoyer un tableau propre
				if(plateauType[i][k]!=null) {
					ecriture=plateauType[i][k]+":"+plateauCouronne[i][k]; //Affichage des deux tableaux
				}
				else {
					ecriture="null";
				}
				while(ecriture.length()<11) {
					ecriture=ecriture+" "; // Creéation d'espace pour un alignement propre au niveau du tableau
				}
				System.out.print(ecriture);
			}
			System.out.println();
		}
	}
	
		public void afficherMatriceDomino(String[][]plateauType,int[][]plateauCouronne ) {  // je crée une fonction qui ajoute un seul demi domino avec les valeurs de position, de type et le nombre de couronnes
    	JFrame frame =new JFrame("Matrice"); 
	    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	    JPanel panel = new JPanel(new GridLayout(0,11));
	    Font font = new Font("Lato", Font.BOLD, 18);
	    String valeur="";
	    for( int i=0; i<11; i++) {
	        for( int j=0; j<11; j++) {
	            valeur = plateauType[i][j] + ":" + plateauCouronne[i][j];
	            JPanel affichePlateau = new JPanel();
	            affichePlateau.setPreferredSize(new Dimension(80,80));
	            affichePlateau.setLayout(new GridBagLayout());
	            affichePlateau.setBorder(BorderFactory.createLineBorder(Color.black));
	            affichePlateau.setFont(font);
	            
	            switch (valeur) { 
	            case "Champs:0" :
	            	affichePlateau.setBackground(Color.YELLOW); 
	            	break;
	            case "Champs:1" :
	            	affichePlateau.setBackground(Color.YELLOW);  
	            	affichePlateau.add(new JLabel("1"));
	            	break;
	            case "Champs:2" :
	            	affichePlateau.setBackground(Color.YELLOW);  
	            	affichePlateau.add(new JLabel("2"));
	            	break;
	            	
	            case "Prairie:0" :
	            	affichePlateau.setBackground(Color.GREEN);  
	            	break;
	            case "Prairie:1" :
	            	affichePlateau.setBackground(Color.GREEN);  
	            	affichePlateau.add(new JLabel("1"));
	            	break;
	            case "Prairie:2" :
	            	affichePlateau.setBackground(Color.GREEN);  
	            	affichePlateau.add(new JLabel("2"));
	            	break;
	            
	            case "Foret:0" :
	            	affichePlateau.setBackground(DARK_GREEN);  
	            	break;
	            case "Foret:1" :
	            	affichePlateau.setBackground(DARK_GREEN);  
	            	affichePlateau.add(new JLabel("1"));
	            	break;
	            case "Foret:2" :
	            	affichePlateau.setBackground(DARK_GREEN);  
	            	affichePlateau.add(new JLabel("2"));
	            	break;
	            	
	            case "Mer:0" :
	            	affichePlateau.setBackground(Color.BLUE);  
	            	break;
	            case "Mer:1" :
	            	affichePlateau.setBackground(Color.BLUE);  
	            	affichePlateau.add(new JLabel("1"));
	            	break;
	            case "Mer:2" :
	            	affichePlateau.setBackground(Color.BLUE);  
	            	affichePlateau.add(new JLabel("2"));
	            	break;
	            	
	            case "Montagne:0" :
	            	affichePlateau.setBackground(BROWN);  
	            	break;
	            case "Montagne:1" :
	            	affichePlateau.setBackground(BROWN);  
	            	affichePlateau.add(new JLabel("1"));
	            	break;
	            case "Montagne:2" :
	            	affichePlateau.setBackground(BROWN);  
	            	affichePlateau.add(new JLabel("2"));
	            	break;
	            
	            case "Mine:0" :
	            	affichePlateau.setBackground(Color.GRAY);  
	            	break;
	            case "Mine:1" :
	            	affichePlateau.setBackground(Color.GRAY);  
	            	affichePlateau.add(new JLabel("1"));
	            	break;
	            case "Mine:2" :
	            	affichePlateau.setBackground(Color.GRAY);  
	            	affichePlateau.add(new JLabel("2"));
	            	break;
	            	
	            case "Chateau:0" :
	            	affichePlateau.setBackground(Color.RED);  
	            	break;
	            	
	            case "null:0" :
	            	affichePlateau.setBackground(Color.WHITE);  
	            	break;
	            	
	            default: 
	            	affichePlateau.setBackground(Color.WHITE);
	            	break;
	            }
	            panel.add(affichePlateau);
	        }
	    }
	    frame.add(panel);  //ce ne sont que des fonctions d'affichage de l'onglet
	    frame.pack();
	    frame.setLocationRelativeTo(null);
	    frame.setVisible(true);
    }
    
	public void placement(String[][] plateauType,ArrayList<Domino> listeDominoSortie,int[][]plateauCouronne) {
		/*
		 *  Les 12 prochaines lignes semblent inutiles; cependant sans elles on ne peut pas déterminer pour un tableau si un type est égal à un autre
		 *  Nous avons donc décider de faire intervenir equals (qu'on ne peut utiliser pour un tableau avec des null) dans cette partie pour réécrire la valeur du type 1 et 2
		 */
		ArrayList<String> listeType=new ArrayList<>(Arrays.asList("Mer","Foret","Prairie","Montagne","Champs","Mine"));
		String type1="";
		for(int i=0;i<6;i++) {
			if(listeDominoSortie.get(0).getRoyaume1().equals(listeType.get(i))){
				type1=listeType.get(i);
			}
		}
		String type2="";
		for(int i=0;i<6;i++) {
			if(listeDominoSortie.get(0).getRoyaume2().equals(listeType.get(i))){
				type2=listeType.get(i);
			}
		}
		int nbrCour1=listeDominoSortie.get(0).getNbrCouronne1();
		int nbrCour2=listeDominoSortie.get(0).getNbrCouronne2();
		
		ArrayList<ArrayList> listeCoupPossible = new ArrayList<>();
		System.out.println("vertical ou horizontal ?"); //on demande à l'utilisateur l'orientation du domino qu'il veut poser
		Scanner scanner=new Scanner(System.in);
		String chaine=scanner.nextLine();
		if(chaine.equals("v")) {
			System.out.println("Voulez-vous inversez le domino ?(oui ou non)");
			String chaineInversement=scanner.nextLine();
			if(chaineInversement.equals("oui")){ // on inverse les dominos si le joueur le souhaite
				String chaineAnnexe=type1;
				type1=type2;
				type2=chaineAnnexe;
				int intAnnexe=nbrCour1;
				nbrCour1=nbrCour2;
				nbrCour2=intAnnexe;
			}
			for(int u=1;u<9;u++) { //Pour chaque position de la matrice on regarde si un coup est possible
				for(int m=1;m<10;m++) {
					ArrayList<Integer> listeCoupPossible1 = new ArrayList<>();
					if(coupPossible(plateauType,u,m,chaine,type1,type2)) { // La fonction coupPossible regarde si on peut jouer à catte position le domino
						listeCoupPossible1.add(u);
						listeCoupPossible1.add(m);
						listeCoupPossible.add(listeCoupPossible1); // on ajoute le coup à la liste des coups possibles
						
					}
				}
			}
			System.out.println(listeCoupPossible); // on affiche cette liste pour l'utilisateur
			if(listeCoupPossible.size()==0) { // Si il n'y a pas de cou possible on fait les lignes suivantes
				System.out.println("Pas de coup jouable");
				String chaine3=scanner.nextLine();
				if(chaine3.equals("oui")) { // on donne une possibilité à l'utilisateur de changer son coup
					placement(plateauType, listeDominoSortie,plateauCouronne);
				}
				
			}
			else { // on a au moins un coup possible
				ArrayList<Integer> listeCouple2 = new ArrayList<>();
				ArrayList<Integer> listeCouple3 = new ArrayList<>();
				System.out.println("Entrez oui si vous voulez changer la position du domino ou entrez la première coordonnée");
				String chaine2=scanner.nextLine(); // de même que dans le cas précédent, on laiise la possibilité de se rétracter
				if(chaine2.equals("oui")) {
					placement(plateauType, listeDominoSortie,plateauCouronne);
					return; // on sort de la fonction pour qu'elle n'y revienne pas après
				}
				int n=Integer.parseInt(chaine2); // on transforme les autres valeurs que oui en integer
				System.out.println("Entrez une deuxième coordonnée");
				int m=scanner.nextInt();
				listeCouple2.add(n);
				listeCouple2.add(m);
				System.out.println(listeCouple2);
				if( listeCoupPossible.contains(listeCouple2)) {
					System.out.println("Coup validé");
					plateauType[n][m]=type1;
					plateauType[n+1][m]=type2;
					plateauCouronne[n][m]=nbrCour1;
					plateauCouronne[n+1][m]=nbrCour2; // on ajoute toutes les informations à la matrice
				}
				else {
					System.out.println("erreur");
					placement(plateauType, listeDominoSortie,plateauCouronne);
				}
			}
			
		}
		if(chaine.equals("h")) { //on fait de même avec l'horizontal qu'avec le vertical
			System.out.println("Voulez-vous inversez le domino ?(oui ou non)");
			String chaineInversement=scanner.nextLine();
			if(chaineInversement.equals("oui")){
				String chaineAnnexe=type1;
				type1=type2;
				type2=chaineAnnexe;
				int intAnnexe=nbrCour1;
				nbrCour1=nbrCour2;
				nbrCour2=intAnnexe;
			}
			for(int u=1;u<10;u++) {
				for(int m=1;m<9;m++) {
					ArrayList<Integer> listeCoupPossible1 = new ArrayList<>();
					
					if(coupPossible(plateauType,u,m,chaine,type1,type2)) {
						listeCoupPossible1.add(u);
						listeCoupPossible1.add(m);
						listeCoupPossible.add(listeCoupPossible1);
						
					}
				}
			}
			System.out.println(listeCoupPossible);
			if(listeCoupPossible.size()==0) {
				System.out.println("Pas de coup jouable");
				System.out.println("coucou");
				String chaine3=scanner.nextLine();
				if(chaine3.equals("oui")) {
					placement(plateauType, listeDominoSortie,plateauCouronne);
				}
				
			}
			else {
				ArrayList<Integer> listeCouple2 = new ArrayList<>();
				ArrayList<Integer> listeCouple3 = new ArrayList<>();
				System.out.println("Entrez oui si vous voulez changer la position du domino ou entrez la première coordonnée");
				String chaine2=scanner.nextLine();
				if(chaine2.equals("oui")) {
					placement(plateauType, listeDominoSortie,plateauCouronne);
					return;
				}
				int n=Integer.parseInt(chaine2);
				int m=scanner.nextInt();
				listeCouple2.add(n);
				listeCouple2.add(m);
				listeCouple3.add(n);
				listeCouple3.add(m+1);
				System.out.println(listeCouple2);
				System.out.println(listeCouple3);
				
				if( listeCoupPossible.contains(listeCouple2)) {
					System.out.println("Coup validé");
					plateauType[n][m]=type1;
					plateauType[n][m+1]=type2;
					plateauCouronne[n][m]=nbrCour1;
					plateauCouronne[n][m+1]=nbrCour2;
				}
				else {
					System.out.println("erreur");
					placement(plateauType, listeDominoSortie,plateauCouronne);
				}
			}
			
		}
		
		afficherPlateau(plateauType,plateauCouronne); // on affiche le nouveau plateau
		afficherMatriceDomino(plateauType,plateauCouronne);
			
	}
	public boolean coupPossible(String[][]plateauType,int u,int m,String v,String type1,String type2) {
		if(v.equals("v")) {
			boolean flag=true;
			if(plateauType[u][m]!=null || plateauType[u+1][m]!=null) {
				return false; // on teste si les cases ne sont pas déjà prises
			}
			
			else if(plusGrandQue5x5(plateauType,u,m,flag)){
				return false; //on teste si on est audelà de 5x5
			}
			/*else if(toucherNon(plateauType,u,m,type1) || toucherNon(matrice,u+1,m,type2)) {
				return false;
			}*/
			else {
				boolean a=toucher(plateauType,u,m,type1);
				boolean b=toucher(plateauType,u+1,m,type2);
				return (a||b); // on regarde si l'un ou l'autre touche un domino du même type que lui
			}
		}
		else { //on fait de même que pour le vertical
			boolean flag=false;
			if(plateauType[u][m]!=null || plateauType[u][m+1]!=null) {
				return false;
			}
			else if(plusGrandQue5x5(plateauType,u,m,flag)){
				return false;
			}
			/*else if(toucherNon(matrice,u,m,type1) || toucherNon(matrice,u,m+1,type2)) {
				return false;
			}*/
			else {
				boolean a=toucher(plateauType,u,m,type1);
				boolean b=toucher(plateauType,u,m+1,type2);
				return (a||b);
			}
		}
		
	}
	public boolean toucher(String[][]plateauType,int u,int m,String type) { //fonction qui teste si un domino touvhe au moins un autre du même type que lui
		if(plateauType[u+1][m]==type || plateauType[u-1][m]==type || plateauType[u][m+1]==type || plateauType[u][m-1]==(type) || plateauType[u+1][m]=="Chateau" || plateauType[u-1][m]=="Chateau" || plateauType[u][m+1]=="Chateau" || plateauType[u][m-1]==("Chateau")) { // on teste pour à gauche, à droite, en bas et en haut
			return true;
		}
		else {
			return false;
		}
		
	}
	public static boolean plusGrandQue5x5(String[][]plateauType,int u,int m,boolean flag) { //fonction qui teste si on dépasse la limite de 5x5
		if(flag) {
			plateauType[u][m]="coucou";
			plateauType[u+1][m]="coucou"; //on met des valeurs au deux coordonnées
			int compteur=0; // on initialise un compteur pour connaître la taille
			for(int i=0;i<11;i++) {
				for(int k=0;k<11;k++) {
					if(plateauType[i][k]!=null) {
						compteur++;
						break; //a cahque fois q'on en voit un sur une ligne on passe directement à la suivante
					}
				}
				if(compteur>=6) {// si c'est plus grand que 6 on le met en erreur
					plateauType[u][m]=null;
					plateauType[u+1][m]=null;
					return true;
				
				}
			}
			compteur=0;
			for(int i=0;i<11;i++) {
				for(int k=0;k<11;k++) {
					if(plateauType[k][i]!=null) {
						compteur++;
						break;//on fait de même avec les colonnes
					}
				}
				if(compteur>=6) {
					plateauType[u][m]=null;
					plateauType[u+1][m]=null;
					return true;
				
				}
			}
			plateauType[u][m]=null;
			plateauType[u+1][m]=null;
			return false; // si aucune des conditions n'est validé on return false
		}
		else { // on fait la même chose pour un placement horizontal
			plateauType[u][m]="coucou";
			plateauType[u][m+1]="coucou";
			int compteur=0;
			for(int i=0;i<11;i++) {
				for(int k=0;k<11;k++) {
					if(plateauType[k][i]!=null) {
						compteur++;
						break;
					}
				}
				if(compteur>=6) {
					plateauType[u][m]=null;
					plateauType[u][m+1]=null;
					return true;
				
				}
			}
			compteur=0;
			for(int i=0;i<11;i++) {
				for(int k=0;k<11;k++) {
					if(plateauType[i][k]!=null) {
						compteur++;
						break;
					}
				}
				if(compteur>=6) {
					plateauType[u][m]=null;
					plateauType[u][m+1]=null;
					return true;
				
				}
			}
			plateauType[u][m]=null;
			plateauType[u][m+1]=null;
			return false;
		}
	}
	
	public boolean toucherNon(String[][]plateauType,int u, int m, String type) { // fonction pour une potentiel utilisation annexe
		if((plateauType[u+1][m]!=type && plateauType[u+1][m]!=null && plateauType[u+1][m]!="Chateau") || (plateauType[u-1][m]!=type && plateauType[u-1][m]!=null && plateauType[u-1][m]!="Chateau") || (plateauType[u][m+1]!=type && plateauType[u][m+1]!=null && plateauType[u][m+1]!="Chateau") || (plateauType[u][m-1]!=type && plateauType[u][m-1]!=null && plateauType[u][m-1]!="Chateau")) {
			return true;
		}
		else {
			return false;
		}
	}
	
	public ArrayList<ArrayList<Integer>> toucherPourComptage(String[][]plateauType,String type,ArrayList<ArrayList<Integer>> listeCaseLie,int iterator) { //fonction qui permet de savoir si un domino touche un du meme type
		ArrayList<Integer> couple = listeCaseLie.get(iterator); // On engendre un couple à partir de listeCaseLie
		/*
		 * Dans cette fonction on va regarder dans chaque direction si un domino touche un domino du même type
		 * Si oui, on va tester si cette position a déjà été compté, si non, on l'ajoute à listeCaseLie
		 */
		if(plateauType[couple.get(0)+1][couple.get(1)]==type && plateauType[couple.get(0)+1][couple.get(1)]!=null) {
			ArrayList<Integer> couple1=new ArrayList<>(Arrays.asList(couple.get(0)+1, couple.get(1)));
			if(!listeCaseLie.contains(couple1)){
				listeCaseLie.add(couple1);
			}
		}
		if(plateauType[couple.get(0)-1][couple.get(1)]==type && plateauType[couple.get(0)-1][couple.get(1)]!=null) {
			ArrayList<Integer> couple1=new ArrayList<>(Arrays.asList(couple.get(0)-1, couple.get(1)));
			if(!listeCaseLie.contains(couple1)){
				listeCaseLie.add(couple1);
			}
		}
		if(plateauType[couple.get(0)][couple.get(1)+1]==type && plateauType[couple.get(0)][couple.get(1)+1]!=null) {
			ArrayList<Integer> couple1=new ArrayList<>(Arrays.asList(couple.get(0), couple.get(1)+1));
			if(!listeCaseLie.contains(couple1)){
				listeCaseLie.add(couple1);
			}
		}
		if(plateauType[couple.get(0)][couple.get(1)-1]==type && plateauType[couple.get(0)][couple.get(1)-1]!=null) {
			ArrayList<Integer> couple1=new ArrayList<>(Arrays.asList(couple.get(0), couple.get(1)-1));
			if(!listeCaseLie.contains(couple1)){
				listeCaseLie.add(couple1);
			}
		}
		return listeCaseLie;
	}
	public int comptagePoints(String[][]plateauType, int[][]plateauCouronne) { // fonction qui calcule les points pour 1 joueur
		int points=0;
		ArrayList<ArrayList> listeCaseCompte= new ArrayList<>(); // cette liste contient toutes les cases qu'ona compté qu'importe leur type
		for(int i=1;i<10;i++) {
			for(int k=1;k<10;k++) {
				ArrayList<Integer> couple = new ArrayList<>();
				couple.add(i);//bou
				couple.add(k);// pour chaque case de la matrice on crée un couple
				if(!listeCaseCompte.contains(couple)) {// on regarde si on a déjà compté cette case
					String type=plateauType[i][k]; //on regarde son type
					ArrayList<ArrayList<Integer>> listeCaseLie =new ArrayList<>(); //on instaure une liste qui notera toutes les cases du même type qui sont liés
					listeCaseLie.add(couple);// on ajoute le couple
					for(int iterateur=0;iterateur!=listeCaseLie.size();iterateur++) { //L'iterateur va alors regarder chaque couple de la liste! Attention la condition de fin varie; cependant, elle s'arrête dans tous les cas
						listeCaseLie=toucherPourComptage(plateauType,type,listeCaseLie,iterateur); //on regarde si des cases touchent celle ci
					}
					int nbrCouronne=0;
					for(int m=0;m<listeCaseLie.size();m++) {
						nbrCouronne=nbrCouronne+plateauCouronne[listeCaseLie.get(m).get(0)][listeCaseLie.get(m).get(1)]; // on compte ensuite toutes les couronnes du royaume de type créer
					}
					points=points+listeCaseLie.size()*nbrCouronne;
					listeCaseCompte.addAll(listeCaseLie);// on ajoute toutes les cases de listeCaseLie à listeCaseCompte
				}
				
			}
		}
		return points;
	}
	
	public void placementIA(String[][] plateauType,ArrayList<Domino> listeDominoSortie,int[][]plateauCouronne) {
		ArrayList<String> listeType=new ArrayList<>(Arrays.asList("Mer","Foret","Prairie","Montagne","Champs","Mine"));
		String type1="";
		for(int i=0;i<6;i++) {
			if(listeDominoSortie.get(0).getRoyaume1().equals(listeType.get(i))){
				type1=listeType.get(i);
			}
		}
		String type2="";
		for(int i=0;i<6;i++) {
			if(listeDominoSortie.get(0).getRoyaume2().equals(listeType.get(i))){
				type2=listeType.get(i);
			}
		}
		int nbrCour1=listeDominoSortie.get(0).getNbrCouronne1();
		int nbrCour2=listeDominoSortie.get(0).getNbrCouronne2();
		int pointsMax=0;
		int coord1Max=0;
		int coord2Max=0;
		int coord3Max=0;
		int coord4Max=0; //on initialise toutes les coordonnées permettant de connaître les valeurs pour les points max
		String chaine="h";
		for(int i=0;i<2;i++) { //on essaie pour horizontal puis vertical
			String chaineInversement="oui";
			for(int k=0;k<2;k++) { //on essaie avec et sans inversement du domino
				if(chaine.equals("h")) {
					if(chaineInversement.equals("oui")){
						String chaineAnnexe=type1;
						type1=type2;
						type2=chaineAnnexe;
						int intAnnexe=nbrCour1;
						nbrCour1=nbrCour2;
						nbrCour2=intAnnexe;
					}
					// on fait quasiment la même chos que pour un être humain
					ArrayList<ArrayList> listeCoupPossible = new ArrayList<>();
					for(int u=1;u<10;u++) {
						for(int m=1;m<9;m++) {
							ArrayList<Integer> listeCoupPossible1 = new ArrayList<>();
							
							if(coupPossible(plateauType,u,m,chaine,type1,type2)) {
								listeCoupPossible1.add(u);
								listeCoupPossible1.add(m);
								listeCoupPossible.add(listeCoupPossible1);
								
							}
						}
					}
					if(listeCoupPossible.size()==0) {
						return; // si aucun coup possible on jette le domino
					}
					for(int iterator=0;iterator<listeCoupPossible.size();iterator++) {
						/*
						 * Pour chaque position, on va calculer le nombre de points qu'elle rapporte
						 * et on va sauvegarder la position de celui qui rapporte le plus de points
						 */
						String[][]matriceCopie=new String[11][11];
						int[][]matrice2Copie=new int[11][11]; // on copie la matrice pour ne pas la modifier
						for(int u=0;u<11;u++) {
							for(int m=0;m<11;m++) {
								matriceCopie[u][m]=plateauType[u][m];
								matrice2Copie[u][m]=plateauCouronne[u][m];
							}
						}
						ArrayList<Integer> couple = listeCoupPossible.get(0);
						matriceCopie[couple.get(0)][couple.get(1)]=type1;
						matriceCopie[couple.get(0)][couple.get(1)+1]=type2;
						matrice2Copie[couple.get(0)][couple.get(1)]=nbrCour1;
						matrice2Copie[couple.get(0)][couple.get(1)+1]=nbrCour2;
						int points=comptagePoints(matriceCopie,matrice2Copie);
						if(pointsMax<=points) {
							pointsMax=points;
							coord1Max=couple.get(0);
							coord2Max=couple.get(1);
							coord3Max=couple.get(0);
							coord4Max=couple.get(1)+1;
						}
					}
				}
				if(chaine.equals("v")) { // on fait de même que pour le cas horizontal
					if(chaineInversement.equals("oui")){
						String chaineAnnexe=type1;
						type1=type2;
						type2=chaineAnnexe;
						int intAnnexe=nbrCour1;
						nbrCour1=nbrCour2;
						nbrCour2=intAnnexe;
					}
					ArrayList<ArrayList> listeCoupPossible = new ArrayList<>();
					for(int u=1;u<9;u++) {
						for(int m=1;m<10;m++) {
							ArrayList<Integer> listeCoupPossible1 = new ArrayList<>();
							
							if(coupPossible(plateauType,u,m,chaine,type1,type2)) {
								listeCoupPossible1.add(u);
								listeCoupPossible1.add(m);
								listeCoupPossible.add(listeCoupPossible1);
								
							}
						}
					}
					if(listeCoupPossible.size()==0) {
						return;
					}
					for(int iterator=0;iterator<listeCoupPossible.size();iterator++) {
						String[][]matriceCopie=new String[11][11];
						int[][]matrice2Copie=new int[11][11];
						for(int u=0;u<11;u++) {
							for(int m=0;m<11;m++) {
								matriceCopie[u][m]=plateauType[u][m];
								matrice2Copie[u][m]=plateauCouronne[u][m];
							}
						}
						ArrayList<Integer> couple = listeCoupPossible.get(0);
						matriceCopie[couple.get(0)][couple.get(1)]=type1;
						matriceCopie[couple.get(0)+1][couple.get(1)]=type2;
						matrice2Copie[couple.get(0)][couple.get(1)]=nbrCour1;
						matrice2Copie[couple.get(0)+1][couple.get(1)]=nbrCour2;
						int points=comptagePoints(matriceCopie,matrice2Copie);
						if(pointsMax<=points) {
							pointsMax=points;
							coord1Max=couple.get(0);
							coord2Max=couple.get(1);
							coord3Max=couple.get(0)+1;
							coord4Max=couple.get(1);
						}
					}
				}
				chaineInversement="non";
			}
			chaine="v";
		}
		plateauType[coord1Max][coord2Max]=type1;
		plateauType[coord3Max][coord4Max]=type2;
		plateauCouronne[coord1Max][coord2Max]=nbrCour1;
		plateauCouronne[coord3Max][coord4Max]=nbrCour2; // on ajoute les coordonnées du domino qui rapporte le plus de points
	}
	
}

