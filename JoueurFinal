import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Joueur {
	String name;
	String color;
	String[][] plateau;
	int[][]plateau2;
	
	public Joueur (String name,String color,String [][] plateau,int[][]plateau2) {
		this.name=name;
		this.color=color;
		this.plateau=plateau;
		this.plateau2=plateau2;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getColor() {
		return color;
	}

	public void setColor(String color) {
		this.color = color;
	}
	
	public String[][] getPlateau() {
		return plateau;
	}

	public void setPlateau(String[][] plateau) {
		this.plateau = plateau;
	}

	public int[][] getPlateau2() {
		return plateau2;
	}

	public void setPlateau2(int[][] plateau2) {
		this.plateau2 = plateau2;
	}

	
	public void afficherPlateau(String[][]plateau,int[][]plateau2) {
		for(int i=0;i<12;i++) {
			for(int k=0;k<12;k++) {
				String ecriture="";
				if(plateau[i][k]!=null) {
					ecriture=plateau[i][k]+":"+plateau2[i][k];
				}
				else {
					ecriture="null"+":"+plateau2[i][k];
				}
				while(ecriture.length()<11) {
					ecriture=ecriture+" ";
				}
				System.out.print(ecriture);
			}
			System.out.println();
		}
	}
	public void placage(String[][] matrice,ArrayList<Domino> listeDominoSortie,int[][]matrice2) {
		ArrayList<String> listeType=new ArrayList<>(Arrays.asList("Mer","Foret","Prairie","Montagne","Champs","Mine"));
		String type1="";
		for(int i=0;i<6;i++) {
			if(listeDominoSortie.get(0).getRoyaume1().equals(listeType.get(i))){
				type1=listeType.get(i);
			}
		}
		String type2="";
		for(int i=0;i<6;i++) {
			if(listeDominoSortie.get(0).getRoyaume2().equals(listeType.get(i))){
				type2=listeType.get(i);
			}
		}
		int nbrCour1=listeDominoSortie.get(0).getNbrCouronne1();
		int nbrCour2=listeDominoSortie.get(0).getNbrCouronne2();
		ArrayList<int[]> liste = new ArrayList<>();
		ArrayList<Integer> liste1 = new ArrayList<>();
		ArrayList<ArrayList> listeCasePrise = new ArrayList<>();

		System.out.println(type1);
		System.out.println(matrice[5][5]==type1);
		for(int k=0;k<matrice.length;k++) {
			for(int j=0;j<matrice[0].length;j++) {
				if(matrice[k][j]!=null) {
					int[] couple= new int[2];
					couple[0]=k;
					couple[1]=j;
					liste.add(couple);
					liste1.add(j);
				}
			}
		}
		for(int i=0;i<liste.size();i++) {
			ArrayList<Integer> listeCouple = new ArrayList<>();
			listeCouple.add(liste.get(i)[0]);
			listeCouple.add(liste.get(i)[1]);
			listeCasePrise.add(listeCouple);
		}
		
		System.out.println(listeCasePrise);
		ArrayList<ArrayList> listeCoupPossible = new ArrayList<>();
		System.out.println("vertical ou horizontal ?");
		Scanner scanner=new Scanner(System.in);
		String chaine=scanner.nextLine();
		if(chaine.equals("v")) {
			System.out.println("Voulez-vous inversez le domino ?(oui ou non)");
			String chaineInversement=scanner.nextLine();
			System.out.println(type1);
			if(chaineInversement.contentEquals("oui")){
				String chaineAnnexe=type1;
				type1=type2;
				type2=chaineAnnexe;
				int intAnnexe=nbrCour1;
				nbrCour1=nbrCour2;
				nbrCour2=intAnnexe;
			}
			System.out.println(type1);
			for(int u=2;u<10;u++) {
				for(int m=1;m<10;m++) {
					ArrayList<Integer> listeCoupPossible1 = new ArrayList<>();
					if(coupPossible(matrice,u,m,chaine,type1,type2)) {
						listeCoupPossible1.add(u);
						listeCoupPossible1.add(m);
						listeCoupPossible.add(listeCoupPossible1);
						
					}
				}
			}
			System.out.println(listeCoupPossible);
			if(listeCoupPossible.size()==0) {
				System.out.println("Pas de coup jouable");
			}
			else {
				ArrayList<Integer> listeCouple2 = new ArrayList<>();
				ArrayList<Integer> listeCouple3 = new ArrayList<>();
				int n=scanner.nextInt();
				int m=scanner.nextInt();
				listeCouple2.add(n);
				listeCouple2.add(m);
				listeCouple3.add(n+1);
				listeCouple3.add(m);
				System.out.println(listeCouple2);
				System.out.println(listeCouple3);
				if( listeCoupPossible.contains(listeCouple2)) {
					System.out.println("Coup validé");
					listeCasePrise.add(listeCouple2);
					matrice[n][m]=type1;
					matrice[n+1][m]=type2;
					matrice2[n][m]=nbrCour1;
					matrice2[n+1][m]=nbrCour2;
				}
				else {
					System.out.println("erreur");
					placage(matrice, listeDominoSortie,matrice2);
				}
			}
			
		}
		if(chaine.equals("h")) {
			for(int u=1;u<10;u++) {
				for(int m=1;m<10;m++) {
					ArrayList<Integer> listeCoupPossible1 = new ArrayList<>();
					
					if(coupPossible(matrice,u,m,chaine,type1,type2)) {
						listeCoupPossible1.add(u);
						listeCoupPossible1.add(m);
						listeCoupPossible.add(listeCoupPossible1);
						
					}
				}
			}
			System.out.println(listeCoupPossible);
			if(listeCoupPossible.size()==0) {
				System.out.println("Pas de coup jouable");
			}
			else {
				ArrayList<Integer> listeCouple2 = new ArrayList<>();
				ArrayList<Integer> listeCouple3 = new ArrayList<>();
				int n=scanner.nextInt();
				int m=scanner.nextInt();
				listeCouple2.add(n);
				listeCouple2.add(m);
				listeCouple3.add(n);
				listeCouple3.add(m+1);
				System.out.println(listeCouple2);
				System.out.println(listeCouple3);
				
				if( listeCoupPossible.contains(listeCouple2)) {
					System.out.println("Coup validé");
					listeCasePrise.add(listeCouple2);
					matrice[n][m]=type1;
					matrice[n][m+1]=type2;
					matrice2[n][m]=nbrCour1;
					matrice2[n][m+1]=nbrCour2;
				}
				else {
					System.out.println("erreur");
					placage(matrice, listeDominoSortie,matrice2);
				}
			}
			
		}
		
		System.out.println(listeCasePrise);
		afficherPlateau(matrice,matrice2);
			
	}
	public boolean coupPossible(String[][]matrice,int u,int m,String v,String type1,String type2) {
		if(v.equals("v")) {
			boolean flag=true;
			if(matrice[u][m]!=null || matrice[u+1][m]!=null) {
				return false;
			}
			
			else if(test(matrice,u,m,flag)){
				return false;
			}
			else if(toucherNon(matrice,u,m,type1) || toucherNon(matrice,u+1,m,type2)) {
				return false;
			}
			else {
				boolean a=toucher(matrice,u,m,type1);
				boolean b=toucher(matrice,u+1,m,type2);
				return (a||b);
			}
		}
		else {
			boolean flag=false;
			if(matrice[u][m]!=null || matrice[u][m+1]!=null) {
				return false;
			}
			else if(test(matrice,u,m,flag)){
				return false;
			}
			else if(toucherNon(matrice,u,m,type1) || toucherNon(matrice,u,m+1,type2)) {
				return false;
			}
			else {
				boolean a=toucher(matrice,u,m,type1);
				boolean b=toucher(matrice,u,m+1,type2);
				return (a||b);
			}
		}
		
	}
	public boolean toucher(String[][]matrice,int u,int m,String type) {
		if(matrice[u+1][m]==type || matrice[u-1][m]==type || matrice[u][m+1]==type || matrice[u][m-1]==(type) || matrice[u+1][m]=="Chateau" || matrice[u-1][m]=="Chateau" || matrice[u][m+1]=="Chateau" || matrice[u][m-1]==("Chateau")) {
			return true;
		}
		else {
			return false;
		}
		
	}
	public static boolean test(String[][]matrice,int u,int m,boolean flag) {
		if(flag) {
			matrice[u][m]="coucou";
			matrice[u+1][m]="coucou";
			int compteur=0;
			for(int i=0;i<12;i++) {
				for(int k=0;k<12;k++) {
					if(matrice[i][k]!=null) {
						compteur++;
						break;
					}
				}
				if(compteur>=6) {
					matrice[u][m]=null;
					matrice[u+1][m]=null;
					return true;
				
				}
			}
			compteur=0;
			for(int i=0;i<12;i++) {
				for(int k=0;k<12;k++) {
					if(matrice[k][i]!=null) {
						compteur++;
						break;
					}
				}
				if(compteur>=6) {
					matrice[u][m]=null;
					matrice[u+1][m]=null;
					return true;
				
				}
			}
			matrice[u][m]=null;
			matrice[u+1][m]=null;
			return false;
		}
		else {
			matrice[u][m]="coucou";
			matrice[u][m+1]="coucou";
			int compteur=0;
			for(int i=0;i<12;i++) {
				for(int k=0;k<12;k++) {
					if(matrice[k][i]!=null) {
						compteur++;
						break;
					}
				}
				if(compteur>=6) {
					matrice[u][m]=null;
					matrice[u][m+1]=null;
					return true;
				
				}
			}
			compteur=0;
			for(int i=0;i<12;i++) {
				for(int k=0;k<12;k++) {
					if(matrice[i][k]!=null) {
						compteur++;
						break;
					}
				}
				if(compteur>=6) {
					matrice[u][m]=null;
					matrice[u][m+1]=null;
					return true;
				
				}
			}
			matrice[u][m]=null;
			matrice[u][m+1]=null;
			return false;
		}
	}
	public void test() {
		System.out.println("coucou");
	}
	public boolean toucherNon(String[][]matrice,int u, int m, String type) {
		if((matrice[u+1][m]!=type && matrice[u+1][m]!=null && matrice[u+1][m]!="Chateau") || (matrice[u-1][m]!=type && matrice[u-1][m]!=null && matrice[u-1][m]!="Chateau") || (matrice[u][m+1]!=type && matrice[u][m+1]!=null && matrice[u][m+1]!="Chateau") || (matrice[u][m-1]!=type && matrice[u][m-1]!=null && matrice[u][m-1]!="Chateau")) {
			return true;
		}
		else {
			return false;
		}
	}
	public ArrayList<ArrayList<Integer>> toucher2(String[][]matrice,String type,ArrayList<ArrayList<Integer>> listeCaseLie,int iterator) {
		ArrayList<Integer> couple = listeCaseLie.get(iterator);
		if(matrice[couple.get(0)+1][couple.get(1)]==type && matrice[couple.get(0)+1][couple.get(1)]!=null) {
			ArrayList<Integer> couple1=new ArrayList<>(Arrays.asList(couple.get(0)+1, couple.get(1)));
			if(!listeCaseLie.contains(couple1)){
				listeCaseLie.add(couple1);
			}
		}
		if(matrice[couple.get(0)-1][couple.get(1)]==type && matrice[couple.get(0)-1][couple.get(1)]!=null) {
			ArrayList<Integer> couple1=new ArrayList<>(Arrays.asList(couple.get(0)-1, couple.get(1)));
			if(!listeCaseLie.contains(couple1)){
				listeCaseLie.add(couple1);
			}
		}
		if(matrice[couple.get(0)][couple.get(1)+1]==type && matrice[couple.get(0)][couple.get(1)+1]!=null) {
			ArrayList<Integer> couple1=new ArrayList<>(Arrays.asList(couple.get(0), couple.get(1)+1));
			if(!listeCaseLie.contains(couple1)){
				listeCaseLie.add(couple1);
			}
		}
		if(matrice[couple.get(0)][couple.get(1)-1]==type && matrice[couple.get(0)][couple.get(1)-1]!=null) {
			ArrayList<Integer> couple1=new ArrayList<>(Arrays.asList(couple.get(0), couple.get(1)-1));
			if(!listeCaseLie.contains(couple1)){
				listeCaseLie.add(couple1);
			}
		}
		return listeCaseLie;
	}
	public int comptagePoints(String[][]matrice, int[][]matrice2) {
		int points=0;
		ArrayList<ArrayList> listeCaseCompte= new ArrayList<>();
		for(int i=1;i<10;i++) {
			for(int k=1;k<10;k++) {
				ArrayList<Integer> couple = new ArrayList<>();
				couple.add(i);
				couple.add(k);
				if(!listeCaseCompte.contains(couple)) {
					String type=matrice[i][k];
					ArrayList<ArrayList<Integer>> listeCaseLie =new ArrayList<>();
					listeCaseLie.add(couple);
					int iterateur=0;
					while(iterateur!=listeCaseLie.size()) {
						listeCaseLie=toucher2(matrice,type,listeCaseLie,iterateur);
						iterateur++;
					}
					int nbrCouronne=0;
					for(int m=0;m<listeCaseLie.size();m++) {
						nbrCouronne=nbrCouronne+matrice2[listeCaseLie.get(m).get(0)][listeCaseLie.get(m).get(1)];
					}
					System.out.println(type);
					System.out.println(nbrCouronne);
					System.out.println(listeCaseLie.size());
					points=points+listeCaseLie.size()*nbrCouronne;
					listeCaseCompte.addAll(listeCaseLie);
				}
				
			}
		}
		return points;
	}
	
	public void inversementDomino(String type1, String type2, int nbrCour1, int nbrCour2) {
		String chaineAnnexe=type1;
		type1=type2;
		type2=chaineAnnexe;
		int intAnnexe=nbrCour1;
		nbrCour1=nbrCour2;
		nbrCour2=intAnnexe;
		
	}
}
